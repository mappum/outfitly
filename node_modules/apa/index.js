var crypto = require('crypto'),
	http = require('http'),
	querystring = require('querystring'),
	xml2js = require('xml2js');

function error(message) {
	throw new Error(message);
}

var Apa = module.exports = function(options) {
	this.id = options.id || error('An AWS ID was not specified');
	this.secret = options.secret || error('An AWS secret was not specified');
	this.associateId = options.associateId || error('An Amazon Associate ID was not specified');
};

Apa.prototype.get = function(operation, args, callback) {
	var fields = args || {};

	fields.Service = 'AWSECommerceService';
	fields.AWSAccessKeyId = this.id;
	fields.AssociateTag = this.associateId;
	fields.Operation = operation;
	fields.Timestamp = new Date().toISOString();
	fields.Version = '2011-08-01';

	var query = [];
	for(var key in fields) {
		var obj = {};
		obj[key] = fields[key];
		query.push(querystring.stringify(obj));
	}
	query.sort();
	query = query.join('&');

	var toSign = 'GET\nwebservices.amazon.com\n/onca/xml\n' + query;

	var hmac = crypto.createHmac('sha256', this.secret);
	hmac.update(toSign);
	query += '&' + querystring.stringify({Signature: hmac.digest('base64')});

	console.log(query);

	http.get({
		host: 'webservices.amazon.com',
		path: '/onca/xml?' + query
	}, function(res) {
		res.setEncoding('utf8');
		var data = '';
		res.on('data', function(chunk){ data += chunk; });
		res.on('end', function() {
			var parser = new xml2js.Parser();
			parser.parseString(data, callback || function(){});
		});
	});
};
